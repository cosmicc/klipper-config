[idle_timeout]
timeout: 600
gcode:
  TURN_OFF_HEATERS
  G28
  M84
  HOTEND_LED C=WHITE B=0
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=1200

[gcode_macro M117]
rename_existing: M117.1
gcode:
  M117.1 {rawparams}
  {action_respond_info(rawparams)}

[gcode_macro FILAMENT_RUNOUT]
gcode:
  M117 Filament Runout Detected
  PAUSE

[delayed_gcode PRINTER_STARTUP]
initial_duration: 3
gcode:
    #SET_LED LED=hotend RED=1 GREEN=0 BLUE=0 TRANSMIT=1
    #G4 P400
    #SET_LED LED=hotend RED=0 GREEN=1 BLUE=0 TRANSMIT=1
    #G4 P400
    #SET_LED LED=hotend RED=0 GREEN=0 BLUE=1 TRANSMIT=1
    #G4 P400
    #SET_LED LED=hotend RED=0 GREEN=1 BLUE=1 TRANSMIT=1
    #G4 P400
    #SET_LED LED=hotend RED=1 GREEN=0 BLUE=1 TRANSMIT=1
    #G4 P400
    #SET_LED LED=hotend RED=1 GREEN=1 BLUE=0 TRANSMIT=1
    #G4 P400
    #SET_LED LED=hotend RED=0 GREEN=1 BLUE=0 TRANSMIT=1
    #G4 P400
    #SET_LED LED=hotend RED=.3 GREEN=.3 BLUE=.3 TRANSMIT=1
    RUN_SHELL_COMMAND CMD=spool PARAMS=query
    LIGHTON
    G28
    
[gcode_macro POWER_OFF_PRINTER]
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
  LIGHTOFF
  {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}
  {% endif %}

[delayed_gcode delayed_printer_off]
initial_duration: 1200
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

[gcode_macro EXAUSTON]
gcode:
  SET_FAN_SPEED FAN=exaust SPEED=1
  
[gcode_macro EXAUSTOFF]
gcode:
  SET_FAN_SPEED FAN=exaust SPEED=0

[delayed_gcode DELAYED_EXAUSTOFF]
initial_duration: 60
gcode:
  SET_FAN_SPEED FAN=exaust SPEED=0

[gcode_macro M141]
description: Chamber Temperature
gcode: 
    SET_HEATER_TEMPERATURE HEATER=Chamber TARGET={params.S}

[gcode_macro WARMUP]
description: Warm Up Printer
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
    {action_respond_info("This command cannot be used while printing")}
  {% else %}
    {% set BED_TEMP = params.BED_TEMP|default(50)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(140)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(30)|float %}
    M140 S{BED_TEMP}
    M104 S{EXTRUDER_TEMP}
    M141 S{CHAMBER_TEMP}
    HOTEND_LED C=YELLOW
  {% endif %}

[gcode_macro COOLDOWN]
description: Cool Down Printer
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
    {action_respond_info("This command cannot be used while printing")}
  {% else %}
    TURN_OFF_HEATERS
    HOTEND_LED C=BLUE
  {% endif %}

[gcode_macro AUTO_BED_LEVEL]
description: Auto Bed Level
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
    {action_respond_info("This command cannot be used while printing")}
  {% else %}
    M117 Homing Printhead
    G28
    M117 Auto Bed Leveling
    BED_MESH_CALIBRATE PROFILE=default METHOD=automatic
    SAVE_CONFIG
  {% endif %}  
    
[gcode_macro PARK_NOZZLE]
description: Park Nozzle
gcode:
  {% set default_x = printer.toolhead.axis_maximum.x %}
  {% set default_y = 0 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'park_x' in svv %}
      {% set default_x = svv.park_x %}
    {% endif %}
    {% if 'park_y' in svv %}
      {% set default_y = svv.park_y %}
    {% endif %}
  {% endif %}

  {% set x = params.X|default(default_x)|float %}
  {% set y = params.Y|default(default_y)|float %}
  {% set z = params.Z|default(200)|float %}

  {% if printer.toolhead.homed_axes != "xyz" %}
    M117 Homing Printhead
    G28
  {% else %}
    G90
  {% endif %}
    M117 Parking Printhead
    G90
    G1 F4800 Z{z} 
    G1 F4800 X{x} Y{y}
    
[gcode_macro WIPE_NOZZLE]
description: Wipe Nozzle
gcode:
  {% if printer.extruder.temperature < 150 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=G12_state
    M117 Wiping Nozzle
    G0 F4800 X129 Y16 Z100
    G0 F4800 X129 Y-5 Z100
    G0 F4800 X129 Y5 Z100
    G0 F4800 X124 Y5 Z100
    G0 F4800 X129 Y5 Z100
    G0 F4800 X100 Y5 Z100
    RESTORE_GCODE_STATE NAME=G12_state MOVE=0
  {% endif %}
  
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(printer.toolhead.axis_maximum.x) %}      #edit to your park position
    {% set y = params.Y|default(0) %}      #edit to your park position
    {% set z = params.Z|default(200)|float %} #edit to your park position
    {% set e = params.E|default(1.5) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    HOTEND_LED C=YELLOW
    M117 Pausing Print
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{e} F2100
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000
    M117 Print Paused

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% if printer.extruder.temperature < 190 %}
      {action_respond_info("Extruder temperature too low")}
    {% else %}
    HOTEND_LED C=WHITE
    M117 Resuming Print
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    G91
    G1 E{e} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    M117 Cancelling Print
    M106 S255  ;*** HE fan on
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    M106 S0
    G91
    G1 F3000 Z10
    G90
    G28
    # Disable steppers
    M84
    M107  ;*** HE fan off
    M117 Print Cancelled
    
[gcode_macro START_PRINT]
gcode:
    LIGHTON
    M117 Preheating
    BED_MESH_PROFILE LOAD=default
    #{% set svv = printer.save_variables.variables %}
    ;; apply Z offset for configured bed surface
    #RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r' % (svv.selected_bed_surface, svv['bed_surface_offsets.' + svv.selected_bed_surface]) }"
    #SET_GCODE_OFFSET MOVE=1 Z={ '%.3f' % (svv["bed_surface_offsets." + svv.selected_bed_surface] | float) }
    ;; set preheating temps
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
    #variable_max_extruder_temp: {EXTRUDER_TEMP}
    #variable_max_bed_temp: {BED_TEMP}
    #variable_max_chamber_temp: {CHAMBER_TEMP}
    # Start bed heating
    HOTEND_LED C=RED
    EXAUSTOFF
    #LIGHTON
    M140 S{BED_TEMP}
    # Preheat Nozzle
    M104 S{params.EXTRUDER_TEMP|float*0.85}
    # Use absolute coordinates
    G90
    # Home the printer
    G28
    # Park Nozzle
    PARK_NOZZLE
    # Wait for bed to reach temperature
    M117 Heating
    {% if printer.heater_bed.temperature < params.BED_TEMP|float*0.85 %}
        M190 S{params.BED_TEMP|float*0.85} # wait till 0.85 of bed temp is reached, then continue  
    {% endif %}
    M104 S{EXTRUDER_TEMP}
    M141 S{CHAMBER_TEMP}
    # Set and wait for nozzle to reach temperature
    M190 S{BED_TEMP}
    M109 S{EXTRUDER_TEMP}
    # Wipe Nozzle
    #WIPE_NOZZLE
    # Purge Line
    HOTEND_LED C=WHITE
    M117 Printing Purge Line
    M82
    G90
    G92 E0
    G1 F6000 X50 Y-111 Z3
    G1 F3000 Z0.4
    G1 F1200 X-50 Y-111 E20
    G1 F3000 Z3
    M117 Printing

[gcode_macro END_PRINT]
gcode:
    M117 Print Complete
    EXAUSTON
    HOTEND_LED C=GREEN
    # Turn off bed, extruder, and fan
    M106 S255  ;*** HE fan on
    TURN_OFF_HEATERS
    M106 S0
    # Move nozzle away from print while retracting
    G91
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    G28
    # Disable steppers
    M84
    M107  ;*** HE fan off
    DELAYED_EXAUSTOFF
    
[gcode_macro M600]
description: Filament Change
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.extruder.temperature < 190 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    M117 Filament Change
    PAUSE
    G91
    G1 E-.8 F2700
    G90
    PARK_NOZZLE
    G91
    G1 E-50 F1000
    G1 E-800 F4800
    RESTORE_GCODE_STATE NAME=M600_state
  {% endif %}
    
[gcode_macro M300]
description: Beep
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0
    
[gcode_macro UNLOAD_FILAMENT]
description: Unload Filament
gcode:
  {% set TEMP = params.TEMP|default(240)|float %}
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    {action_respond_info("This command cannot be used while printing")}
  {% endif %}
    M117 Heating Hotend
    M109 S{TEMP}
    M117 Unloading Filament {loaded_spool}
    G90
    G92 E0
    G1 E5 F100 
    G92 E0 
    G1 E-200 F2000 
    G92 E0 ;Reset the position of the extruder
    G1 E-500 F4000
    #SAVE_VARIABLE VARIABLE=loaded_spool VALUE="Empty"
    M117 Filament {loaded_spool} Unloaded 
    
[gcode_macro LOAD_FILAMENT]
description: Load Filament
gcode:
  {% set SPOOL_ID = params.SPOOL_ID %}
  {% set ETEMP = params.TEMP|default(240)|float %}
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    {action_respond_info("This command cannot be used while printing")}
  {% endif %}
  {% if params.SPOOL_ID %}
    #SAVE_VARIABLE VARIABLE=loaded_spool VALUE='"{SPOOL_ID}"'
    #RESPOND TYPE=command MSG="{ 'Load Spool %s Now' % (SPOOL_ID) }"
    #RUN_SHELL_COMMAND CMD=spool PARAMS=load
    M117 Heating Hotend
    M109 S{ETEMP}
    #M117 Loading Filament {SPOOL_ID}
    G90
    G92 E0 
    G1 E500 F2000 
    G92 E0 
    G1 E200 F360
    G92 E0 ;Reset the position of the extruder
    M117 Filament Loaded
  {% else %}
     {action_respond_info("You must specify a spool ID for the loading filament")}
  {% endif %}
  
[gcode_macro PURGE_FILAMENT]
description: Purge Filament
gcode:
  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.extruder.temperature < 190 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    M117 Purging Filament
    G90
    G92 E0 ;Reset the position of the extruder
    G1 E50 F360
    G92 E0 ;Reset the position of the extruder
    M117 Purge Complete
  {% endif %}


[gcode_macro M900]
description: Set Pressure Advance
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}
  
[gcode_macro HOTEND_LED]
gcode:
  {% if 'C' in params %}
  {% set B = params.B|default(0.3)|float %}
    {% if params.C == 'BLUE' %}
      SET_LED LED=hotend RED=0 GREEN=0 BLUE={B} TRANSMIT=1
    {% elif params.C == 'RED' %}
      SET_LED LED=hotend RED={B} GREEN=0 BLUE=0 TRANSMIT=1
    {% elif params.C == 'GREEN' %}
      SET_LED LED=hotend RED=0 GREEN={B} BLUE=0 TRANSMIT=1
    {% elif params.C == 'WHITE' %}
      SET_LED LED=hotend RED={B} GREEN={B} BLUE={B} TRANSMIT=1
    {% elif params.C == 'CYAN' %}
      SET_LED LED=hotend RED=0 GREEN={B} BLUE={B} TRANSMIT=1
    {% elif params.C == 'PURPLE' %}
      SET_LED LED=hotend RED={B} GREEN=0 BLUE={B} TRANSMIT=1
    {% elif params.C == 'YELLOW' %}
      SET_LED LED=hotend RED={B} GREEN={B} BLUE=0 TRANSMIT=1
    {% endif %}
  {% else %}
    SET_LED LED=hotend RED=0 GREEN=0 BLUE=0 TRANSMIT=1
  {% endif %}

[gcode_macro NOTIFY]
gcode:
  {% if 'MSG' in params %}
    RESPOND TYPE=command MSG="action:notification {params.MSG}"
  {% endif %}

[gcode_macro LIGHTON]
gcode:
  SET_GCODE_VARIABLE MACRO=LIGHTTOGGLE VARIABLE=value value=1
  {action_call_remote_method("set_device_power",
                             device="light",
                             state="on")}
  
[gcode_macro LIGHTOFF]
gcode:
  SET_GCODE_VARIABLE MACRO=LIGHTTOGGLE VARIABLE=value value=0
  {action_call_remote_method("set_device_power",
                             device="light",
                             state="off")}

[gcode_macro LIGHTTOGGLE]
variable_value: 0
gcode:
  {% if printer["gcode_macro LIGHTTOGGLE"].value == 0 %}
      {action_call_remote_method("set_device_power",
                             device="light",
                             state="on")}
    SET_GCODE_VARIABLE MACRO=LIGHTTOGGLE VARIABLE=value value=1
  {% elif printer["gcode_macro LIGHTTOGGLE"].value == 1 %}
      {action_call_remote_method("set_device_power",
                             device="light",
                             state="off")}
    SET_GCODE_VARIABLE MACRO=LIGHTTOGGLE VARIABLE=value value=0
  {% endif %}

[gcode_macro SPOOLINFO]
description: Current loaded spool info
gcode:
    RUN_SHELL_COMMAND CMD=spool PARAMS=query

[gcode_macro WEIGHT_CALIBRATE]
description: Calibrate weight sensors
gcode:
    RUN_SHELL_COMMAND CMD=weight_calibrate

[gcode_macro SET_BED_SURFACE]
description: stores and optionally activates the gcode offset for a given bed surface
gcode:
    {% set svv = printer.save_variables.variables %}

    {% set BED_SURFACE = params.NAME | default(svv.selected_bed_surface) %}
    {% set Z_OFFSET    = params.OFFSET | default(printer.gcode_move.homing_origin.z) | float %}
    {% set MOVE        = params.MOVE | default(0) | int %}

    {% set OLD_Z_OFFSET = svv['bed_surface_offsets.' + BED_SURFACE] | default("unknown") %}

    SAVE_VARIABLE VARIABLE=selected_bed_surface VALUE="'{ BED_SURFACE }'"
    SAVE_VARIABLE VARIABLE=bed_surface_offsets.{ BED_SURFACE } VALUE={ '%.3f' % Z_OFFSET }

    RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r -> %05.3f' % (BED_SURFACE, OLD_Z_OFFSET, Z_OFFSET) }"

    SET_GCODE_OFFSET Z={ '%.3f' % Z_OFFSET } MOVE={ MOVE }
